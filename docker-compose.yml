# SPISA Development Environment
# This docker-compose file sets up the complete development stack

services:
  # ==============================================================================
  # POSTGRESQL DATABASE
  # ==============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: spisa-postgres
    environment:
      POSTGRES_DB: spisa
      POSTGRES_USER: spisa_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-spisa_dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=es_AR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spisa_user -d spisa"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - spisa-network

  # ==============================================================================
  # PGADMIN (Database Management UI)
  # ==============================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: spisa-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@spisa.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - spisa-network
    profiles:
      - tools  # Only start with: docker compose --profile tools up

  # ==============================================================================
  # BACKEND API (.NET 8)
  # ==============================================================================
  # Uncomment when backend is implemented
  # api:
  #   build:
  #     context: ./backend
  #     dockerfile: src/Spisa.WebApi/Dockerfile
  #   container_name: spisa-api
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ASPNETCORE_URLS=http://+:8080
  #     - ConnectionStrings__DefaultConnection=Host=postgres;Database=spisa;Username=spisa_user;Password=${DB_PASSWORD:-spisa_dev_password}
  #     - JWT__Secret=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
  #     - JWT__Issuer=spisa-api
  #     - JWT__Audience=spisa-frontend
  #     - JWT__ExpirationMinutes=60
  #   volumes:
  #     - ./backend/src:/app/src:ro  # For hot reload in development
  #   ports:
  #     - "5000:8080"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   networks:
  #     - spisa-network

  # ==============================================================================
  # FRONTEND (Next.js) - Development Mode
  # ==============================================================================
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: spisa-frontend-dev
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://spisa_user:spisa_dev_password@postgres:5432/spisa}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-super-secret-nextauth-key-change-in-production}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - spisa-network
    profiles:
      - dev

  # ==============================================================================
  # FRONTEND (Next.js) - Build Test (Reproduces Railway Build)
  # ==============================================================================
  frontend-build-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: builder
      args:
        - DATABASE_URL=${DATABASE_URL:-postgresql://spisa_user:spisa_dev_password@postgres:5432/spisa}
        - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-super-secret-nextauth-key-change-in-production}
        - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
    container_name: spisa-frontend-build-test
    profiles:
      - build-test

  # ==============================================================================
  # FRONTEND (Next.js) - Production Mode
  # ==============================================================================
  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: production
      args:
        - DATABASE_URL=${DATABASE_URL:-postgresql://spisa_user:spisa_dev_password@postgres:5432/spisa}
        - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-super-secret-nextauth-key-change-in-production}
        - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
    container_name: spisa-frontend-prod
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://spisa_user:spisa_dev_password@postgres:5432/spisa}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-super-secret-nextauth-key-change-in-production}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - spisa-network
    profiles:
      - prod

  # ==============================================================================
  # NGINX (Reverse Proxy) - Optional for production-like setup
  # ==============================================================================
  # nginx:
  #   image: nginx:alpine
  #   container_name: spisa-nginx
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   depends_on:
  #     - frontend
  #     - api
  #   restart: unless-stopped
  #   networks:
  #     - spisa-network
  #   profiles:
  #     - production

# ==============================================================================
# VOLUMES
# ==============================================================================
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

# ==============================================================================
# NETWORKS
# ==============================================================================
networks:
  spisa-network:
    driver: bridge

# ==============================================================================
# USAGE INSTRUCTIONS
# ==============================================================================
#
# Start all services:
#   docker compose up -d
#
# Start with pgAdmin:
#   docker compose --profile tools up -d
#
# View logs:
#   docker compose logs -f
#   docker compose logs -f postgres
#   docker compose logs -f api
#
# Stop all services:
#   docker compose down
#
# Stop and remove volumes (WARNING: deletes all data):
#   docker compose down -v
#
# Rebuild services:
#   docker compose build
#   docker compose up -d --build
#
# Execute commands in running container:
#   docker compose exec postgres psql -U spisa_user -d spisa
#   docker compose exec api dotnet ef migrations add InitialCreate
#
# ==============================================================================

